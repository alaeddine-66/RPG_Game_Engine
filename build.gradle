buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {


  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  sourceCompatibility = 17


  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }

  /**
     * Configuration pour la génération de Javadoc
     */
    task generateJavadoc(type: Javadoc) {
        source = sourceSets.main.allJava // Définit les fichiers sources à documenter
        classpath = sourceSets.main.compileClasspath // Spécifie le classpath nécessaire pour Javadoc
        destinationDir = file("$buildDir/docs/javadoc") // Dossier de destination pour les fichiers Javadoc générés

        options {
            author true  // Inclut l'information sur l'auteur
            version true // Inclut la version du projet dans la Javadoc
            links "https://docs.oracle.com/javase/17/docs/api/" // Lien vers la documentation Java standard
        }
    }

    // Faire en sorte que le task generateJavadoc soit exécuté après compileJava
    compileJava.finalizedBy(generateJavadoc)

}

subprojects {
  version = '$projectVersion'
  ext.appName = 'TestJava2'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'TestJava2' + '-parent'



